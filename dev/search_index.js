var documenterSearchIndex = {"docs":
[{"location":"modules/PostgresORM.PostgresORMUtil/#Module-PostgresORMUtil","page":"Module PostgresORMUtil","title":"Module PostgresORMUtil","text":"","category":"section"},{"location":"modules/PostgresORM.PostgresORMUtil/","page":"Module PostgresORMUtil","title":"Module PostgresORMUtil","text":"TODO","category":"page"},{"location":"getting-started/#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"getting-started/#Pre-requisites","page":"Getting started","title":"Pre-requisites","text":"","category":"section"},{"location":"getting-started/#Install-LibPQ.jl","page":"Getting started","title":"Install LibPQ.jl","text":"","category":"section"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"(MyProject) pkg> add LibPQ","category":"page"},{"location":"getting-started/#Install-PostgresORM.jl","page":"Getting started","title":"Install PostgresORM.jl","text":"","category":"section"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"(MyProject) pkg> add PostgresORM","category":"page"},{"location":"getting-started/#Example-projects","page":"Getting started","title":"Example projects","text":"","category":"section"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"You can look at the following projects to see how PostgresORM is used :","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"IMDBTestApp.jl","category":"page"},{"location":"getting-started/#Concepts","page":"Getting started","title":"Concepts","text":"","category":"section"},{"location":"getting-started/#Classes","page":"Getting started","title":"Classes","text":"","category":"section"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"PostgreSQL tables are mapped to mutable composite types that inherit the abstract type PostgresORM.IEntity.","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"For the sake of conciseness we call this particular type a class.","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"A class looks like this :","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"mutable struct Film <: IFilm\n\n  id::Union{Missing,Int32}\n  codeName::Union{Missing,String}\n  year::Union{Missing,Int16}\n  actorFilmAssos::Union{Missing,Vector{Model.IActorFilmAsso}}\n\n  Film(args::NamedTuple) = Film(;args...)\n  Film(;\n    id = missing,\n    codeName = missing,\n    year = missing,\n    actorFilmAssos = missing,\n  ) = (\n    x = new(missing,missing,missing,missing,);\n    x.id = id;\n    x.codeName = codeName;\n    x.year = year;\n    x.actorFilmAssos = actorFilmAssos;\n    return x\n  )\n\nend","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"Lets describe the key aspects of a class:","category":"page"},{"location":"getting-started/#A-*class*-inherits-an-abstract-type-that-inherits-IEntity","page":"Getting started","title":"A class inherits an abstract type that inherits IEntity","text":"","category":"section"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"mutable struct Film <: IFilm where IFilm <: PostgresORM.IEntity","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"This allows us to avoid circular dependencies","category":"page"},{"location":"getting-started/#Fields-of-a-class-are-all-Union-of-a-Missing-and-something-else","page":"Getting started","title":"Fields of a class are all Union of a Missing and something else","text":"","category":"section"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"id::Union{Missing,Int32}","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"The 'something else' can be a lot of things including a IEntity or a vector of IEntity.","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"In this documentation we call:","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"A 'complex property', a property of type IEntity. It is also named a \"manyToOne\" property and it resolves to a foreign key in the table of the   class.","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"A 'property of IEntities', a property of type Vector{T} where T <: IEntity.   It is also named a \"oneToMany\" property and it is the counter part of a complex property in another class.","category":"page"},{"location":"getting-started/#A-*class*-has-two-constructors","page":"Getting started","title":"A class has two constructors","text":"","category":"section"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"A first constructor that takes a NamedTuple and that is required by PostgresORM function. It calls the second constructor by splatting the NamedTuple.","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"A second constructor that takes optional named arguments with default values   missing and that assign the values to the matching properties.","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"Therefore:","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"Calling Film() creates an instance of Film with all properties set to missing","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"Calling Film(id = 34, codeName = \"cube\") creates an instance of Film with all properties set to missing except id and codeName","category":"page"},{"location":"getting-started/#ORM-modules","page":"Getting started","title":"ORM modules","text":"","category":"section"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"An ORM module is a Julia module that tells PostgresORM how to handle a class. It contains the following:","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"data_type = Model.Film: Assigns the module variable data_type to the   class associated with the ORM module","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"PostgresORM.get_orm(x::Model.Film) = return(ORM.FilmORM): Declares a new   method of function PostgresORM.get_orm, this function is used to tell   PostgresORM which ORM module to use for a given class","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"get_schema_name() = \"public\": Returns the PostgreSQL schema name of the table associated with the class","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"get_table_name() = \"film\": Returns the table name associated with the class  ","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"get_columns_selection_and_mapping(): Returns the mapping between julia   fields and table columns. Note that  a complex property can be mapped to   an array of columns if the foreign key has multiple columns (i.e. if the   class of the complexproperty_ has a composite id)","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"get_id_props(): Returns the fields that make the id of the class. These   fields can be complex properties","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"get_onetomany_counterparts(): It gives for every property of IEntities     the associated complex property (i.e. manyToOne property)","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"get_types_override(): It gives for every oneToMany or manyToOne property   the real type of the property","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"Some optional functions for the tracking of changes:","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"get_track_changes(): Tells PostgresORM to record all the changes made to   instances of the class","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"get_creator_property(): Tells which property holds the reference of the   user that created the instance. This property must inherit PostgresORM.AppUser","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"get_editor_property(): Tells which property holds the reference of the   user that last edited the instance. This property must inherit PostgresORM.AppUser","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"get_creation_time_property(): Tells which property holds the creation   time of the instance","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"get_update_time_property(): Tells which property holds the last update   time of the instance","category":"page"},{"location":"getting-started/#Enums","page":"Getting started","title":"Enums","text":"","category":"section"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"Julia enums are the counterpart of PostgreSQL custom enumeration types.","category":"page"},{"location":"getting-started/#LibPQ-connection","page":"Getting started","title":"LibPQ connection","text":"","category":"section"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"Many PostgresORM functions expects a LibPQ.Connection as one of the arguments. The developer is in charge of managing the connections and the transactions.","category":"page"},{"location":"getting-started/#Design-choices","page":"Getting started","title":"Design choices","text":"","category":"section"},{"location":"getting-started/#Retrieval-of-*complex-properties*","page":"Getting started","title":"Retrieval of complex properties","text":"","category":"section"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"Methods retrieve_entity and retrieve_one_entity expects the argument retrieve_complex_props to tell them if they need to make additional queries to retrieve the properties of the complex properties. If retrieve_complex_props == false then the properties of a complexproperty_ will be set to missing except the properties used as IDs.","category":"page"},{"location":"getting-started/#Retrieval-of-*properties-of-IEntities*","page":"Getting started","title":"Retrieval of properties of IEntities","text":"","category":"section"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"Reminder, methods retrieve_entity and retrieve_one_entity expects the argument retrieve_complex_props to tell them if they need to make additional queries to retrieve the properties of the  complex properties. There is no such thing for properties of IEntities, PostgresORM never loads them (the properties of will be equal to missing). It is up to the package user to enrich the instance if he wants to.","category":"page"},{"location":"getting-started/#Update-of-a-*properties-of-IEntities*","page":"Getting started","title":"Update of a properties of IEntities","text":"","category":"section"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"update_entity does not update properties of type vector of IEntities. If the user wants to update a property of type vector of IEntities, he needs to use update_vector_property!.","category":"page"},{"location":"getting-started/#Beware!-missing-has-two-meanings","page":"Getting started","title":"Beware! missing has two meanings","text":"","category":"section"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"A property with value missing can mean that:","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"the value is missing for this entity\nthe value has not been loaded yet","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"We could have make use of Nothing for the second case but we decided not to because the benefit was too small compare to the complexity it was adding. Nevertheless, the developer must be well aware of this when updating an instance. Here are two code snippets to show what is the risk:","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"  # Load the film with retrieve_complex_props set to true\n  film = retrieve_one_entity(Film(codeName = \"cube\"),\n                             true, # retrieve the complex props\n                             dbconn)\n  @test ismissing(film.director.id) # false\n  @test ismissing(film.director.birthDate) # false\n  update_entity(film.director, dbconn) # This is OK\n\n\n  # Load the film with retrieve_complex_props set to false\n  film = retrieve_one_entity(Film(codeName = \"cube\"),\n                             false, # do not retrieve the complex props\n                             dbconn)\n  @test ismissing(film.director.id) # false\n  @test ismissing(film.director.birthDate) # true\n  update_entity(film.director, dbconn) # This is NOT OK! the director will loose\n                                       #   its birthDate\n\n","category":"page"},{"location":"getting-started/#Reverse-engineer-the-database","page":"Getting started","title":"Reverse engineer the database","text":"","category":"section"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"The easiest way to get started is to ask PostgresORM to generate the classes, the ORM modules and the enums. Once done, you can copy the files in the src folder of the project and declare everything in the project (see how it's done in IMDBTestApp.jl).","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"Here is an example of script to reverse engineer a database:","category":"page"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"out_dir = (@__DIR__) * \"/out\"\ndbconn = begin\n    database = \"imdbtestapp\"\n    user = \"imdbtestapp\"\n    host = \"127.0.0.1\"\n    port = \"5432\"\n    password = \"1234\"\n\n    LibPQ.Connection(\"host=$(host)\n                      port=$(port)\n                      dbname=$(database)\n                      user=$(user)\n                      password=$(password)\n                      \"; throw_error=true)\n    end\nPostgresORM.Tool.generate_julia_code(dbconn,out_dir)\n\nclose(dbconn)","category":"page"},{"location":"modules/PostgresORM/#Module-PostgresORM","page":"Module PostgresORM","title":"Module PostgresORM","text":"","category":"section"},{"location":"modules/PostgresORM/","page":"Module PostgresORM","title":"Module PostgresORM","text":"PostgresORM.create_entity!\nPostgresORM.create_in_bulk_using_copy\nPostgresORM.retrieve_entity\nPostgresORM.retrieve_one_entity\nPostgresORM.update_entity!\nPostgresORM.update_vector_property!\nPostgresORM.delete_entity\nPostgresORM.delete_entity_alike\nPostgresORM.execute_plain_query\nPostgresORM.execute_query_and_handle_result","category":"page"},{"location":"modules/PostgresORM/#PostgresORM.create_entity!","page":"Module PostgresORM","title":"PostgresORM.create_entity!","text":"create_entity!(new_object::IEntity,\n               dbconn::LibPQ.Connection;\n               creator::Union{IAppUser,Missing} = missing)\n\nPersists an instance to the database. Properties of type vector of IEntity are not persisted (see function update_vector_property! for that usage). The instance gets enriched by the values generated by the database in the process (eg. autogenerated primary keys). If the optional argument 'creator' is given and that the ORM module of the class is configured to track the creator then a entry will be inserted in the modification table\n\n\n\n\n\n","category":"function"},{"location":"modules/PostgresORM/#PostgresORM.create_in_bulk_using_copy","page":"Module PostgresORM","title":"PostgresORM.create_in_bulk_using_copy","text":"function create_in_bulk_using_copy(entities::Vector{T},\n                                   dbconn::LibPQ.Connection) where T <: IEntity\n\nPersists many instances to the database using PostgreSQL 'COPY'\n\n\n\n\n\n","category":"function"},{"location":"modules/PostgresORM/#PostgresORM.retrieve_entity","page":"Module PostgresORM","title":"PostgresORM.retrieve_entity","text":"retrieve_entity(filter_object::IEntity,\n                retrieve_complex_props::Bool,\n                dbconn::LibPQ.Connection)\n\nRetrieves a vector or T instances that match the filter. If there is no match, it returns an empty vector. If retrieve_complex_props is true then a complex prop (i.e. a property of type IEntity) is fully loaded using an additional query to the database ; if not, an instance of IEntity is simply created using the values of the foreign key, the other properties are left to missing.\n\n\n\n\n\n","category":"function"},{"location":"modules/PostgresORM/#PostgresORM.retrieve_one_entity","page":"Module PostgresORM","title":"PostgresORM.retrieve_one_entity","text":"retrieve_one_entity(filter_object::T,\n                    retrieve_complex_props::Bool,\n                    dbconn::LibPQ.Connection)\n\nRetrieves an instance ot T that matches the filter. If there is no match then the function returns missing. If there are more than one match, an error is thrown. If retrieve_complex_props is true then a complex prop (i.e. a property of type IEntity) is fully loaded using an additional query to the database ; if not, an instance of IEntity is simply created using the values of the foreign key, the other properties are left to missing.\n\n\n\n\n\n","category":"function"},{"location":"modules/PostgresORM/#PostgresORM.update_entity!","page":"Module PostgresORM","title":"PostgresORM.update_entity!","text":"update_entity!(updated_object::IEntity,\n               dbconn::LibPQ.Connection;\n               editor::Union{IAppUser,Missing} = missing)\n\nUpdates an instance to the database. Properties of type vector of IEntity are not updated (see function update_vector_property! for that usage). The instance gets enriched by the values generated by the database in the process (eg. values generated by triggers). If the optional argument 'editor' is given and that the ORM module of the class is configured to track the editor then a entry will be inserted in the modification table\n\n\n\n\n\n","category":"function"},{"location":"modules/PostgresORM/#PostgresORM.update_vector_property!","page":"Module PostgresORM","title":"PostgresORM.update_vector_property!","text":"update_vector_property!(updated_object::IEntity,\n                        updated_property::Symbol,\n                        dbconn::Union{Missing, LibPQ.Connection};\n                        editor::Union{Missing, IAppUser} = missing)\n\nUpdates a property of type vector of IEntity\n\n\n\n\n\n","category":"function"},{"location":"modules/PostgresORM/#PostgresORM.delete_entity","page":"Module PostgresORM","title":"PostgresORM.delete_entity","text":"delete_entity(deleted_object::IEntity,\n              dbconn::LibPQ.Connection;\n              editor::Union{IAppUser,Missing} = missing)\n\nDeletes an entity on the basis of its ID\n\n\n\n\n\n","category":"function"},{"location":"modules/PostgresORM/#PostgresORM.delete_entity_alike","page":"Module PostgresORM","title":"PostgresORM.delete_entity_alike","text":"delete_entity_alike(filter_object::IEntity,\n                    dbconn::LibPQ.Connection;\n                    editor::Union{IAppUser,Missing} = missing)\n\nDeletes all entities matching the the filter\n\n\n\n\n\n","category":"function"},{"location":"modules/PostgresORM/#PostgresORM.execute_plain_query","page":"Module PostgresORM","title":"PostgresORM.execute_plain_query","text":"  execute_plain_query(query_string::String,\n                      query_args::Union{Vector,Missing},\n                      dbconn::LibPQ.Connection)\n\nExecute a query and with the given arguments returns a dataframe\n\n\n\n\n\n","category":"function"},{"location":"modules/PostgresORM/#PostgresORM.execute_query_and_handle_result","page":"Module PostgresORM","title":"PostgresORM.execute_query_and_handle_result","text":"  execute_query_and_handle_result(query_string::String,\n                                  data_type::DataType,\n                                  query_args::Union{Vector,Missing},\n                                  retrieve_complex_props::Bool,\n                                  dbconn::LibPQ.Connection)\n\nExecute a query and with the given arguments and convert the rows to the given datatype in the same way that `retrieveentity` would do it.\n\n\n\n\n\n","category":"function"},{"location":"#PostgresORM.jl","page":"Index","title":"PostgresORM.jl","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Welcome to the PostgresORM.jl documentation!","category":"page"},{"location":"","page":"Index","title":"Index","text":"This resource aims to teach you everything you need to know to get up and running with Object Relational Mapping between a Julia project and a PostgreSQL database  using PostgresORM.jl package.","category":"page"},{"location":"","page":"Index","title":"Index","text":"Depth = 2\nPages = [\"getting-started.md\",\n         \"modules/PostgresORM.md\",         \n         ]","category":"page"},{"location":"modules/PostgresORM.Controller/#Module-PostgresORM.Controller","page":"Module PostgresORM.Controller","title":"Module PostgresORM.Controller","text":"","category":"section"},{"location":"modules/PostgresORM.Controller/","page":"Module PostgresORM.Controller","title":"Module PostgresORM.Controller","text":"TODO","category":"page"}]
}
