# CREATE
"""
    create_entity!(new_object::IEntity,
                   dbconn::LibPQ.Connection;
                   creator::Union{IAppUser,Missing} = missing)

Persists an instance to the database.
Properties of type vector of IEntity are not persisted
(see function `update_vector_property!` for that usage).
The instance gets enriched by the values generated by the database in the process
(eg. autogenerated primary keys).
If the optional argument 'creator' is given and that the ORM module of the class
is configured to track the creator then a entry will be inserted in the
modification table
"""
function create_entity!(new_object::IEntity,
                       dbconn::LibPQ.Connection;
                       creator::Union{IAppUser,Missing} = missing)

   Controller.create_entity!(new_object,
                             dbconn;
                             creator = creator)
end

"""
    function create_in_bulk_using_copy(entities::Vector{T},
                                       dbconn::LibPQ.Connection) where T <: IEntity

Persists many instances to the database using PostgreSQL 'COPY'
"""
function create_in_bulk_using_copy(entities::Vector{T},
                                   dbconn::LibPQ.Connection) where T <: IEntity

   Controller.create_in_bulk_using_copy(entities,
                                        dbconn)
end

# RETRIEVE
"""
    retrieve_entity(filter_object::IEntity,
                    retrieve_complex_props::Bool,
                    dbconn::LibPQ.Connection)

Retrieves a vector or T instances that match the filter.
If there is no match, it returns an empty vector.
If `retrieve_complex_props` is true then a complex prop (i.e. a property of
type IEntity) is fully loaded using an additional query to the database ;
if not, an instance of IEntity is simply created using the values of the foreign
key, the other properties are left to missing.
"""
function retrieve_entity(filter_object::IEntity,
                         retrieve_complex_props::Bool,
                         dbconn::LibPQ.Connection)

     Controller.retrieve_entity(filter_object,
                               retrieve_complex_props,
                               dbconn)
end

"""
    retrieve_one_entity(filter_object::T,
                        retrieve_complex_props::Bool,
                        dbconn::LibPQ.Connection)

Retrieves an instance ot T that matches the filter.
If there is no match then the function returns missing.
If there are more than one match, an error is thrown.
If `retrieve_complex_props` is true then a complex prop (i.e. a property of
type IEntity) is fully loaded using an additional query to the database ;
if not, an instance of IEntity is simply created using the values of the foreign
key, the other properties are left to missing.
"""
function retrieve_one_entity(filter_object::T,
                             retrieve_complex_props::Bool,
                             dbconn::LibPQ.Connection) where T <: IEntity
     Controller.retrieve_one_entity(filter_object,
                                     retrieve_complex_props,
                                     dbconn)
end


"""
    update_entity!(updated_object::IEntity,
                   dbconn::LibPQ.Connection;
                   editor::Union{IAppUser,Missing} = missing)

Updates an instance to the database.
Properties of type vector of IEntity are not updated
(see function `update_vector_property!` for that usage).
The instance gets enriched by the values generated by the database in the process
(eg. values generated by triggers).
If the optional argument 'editor' is given and that the ORM module of the class
is configured to track the editor then a entry will be inserted in the
modification table
"""
function update_entity!(updated_object::IEntity,
                       dbconn::LibPQ.Connection;
                       editor::Union{IAppUser,Missing} = missing
                       )
    Controller.update_entity!(updated_object,
                              dbconn;
                              editor = dbconn
                              )
end

"""
    update_vector_property!(updated_object::IEntity,
                            updated_property::Symbol,
                            dbconn::Union{Missing, LibPQ.Connection};
                            editor::Union{Missing, IAppUser} = missing)

Updates a property of type vector of IEntity

"""
function update_vector_property!(updated_object::IEntity,
                                 updated_property::Symbol,
                                 dbconn::Union{Missing, LibPQ.Connection};
                                 editor::Union{Missing, IAppUser} = missing)

      Controller.update_vector_property!(updated_object,
                                        updated_property,
                                        dbconn;
                                        editor = editor)

end

"""
    delete_entity(deleted_object::IEntity,
                  dbconn::LibPQ.Connection;
                  editor::Union{IAppUser,Missing} = missing)

Deletes an entity on the basis of its ID
"""
function delete_entity(deleted_object::IEntity,
                       dbconn::LibPQ.Connection;
                       editor::Union{IAppUser,Missing} = missing
                       )
    Controller.delete_entity(deleted_object,
                             dbconn;
                             editor = editor
                             )
end

"""
    delete_entity_alike(filter_object::IEntity,
                        dbconn::LibPQ.Connection;
                        editor::Union{IAppUser,Missing} = missing)

Deletes all entities matching the the filter
"""
function delete_entity_alike(filter_object::IEntity,
                       dbconn::LibPQ.Connection;
                       editor::Union{IAppUser,Missing} = missing
                       )
    Controller.delete_entity_alike(filter_object,
                                   dbconn;
                                   editor = editor
                                   )
end

"""
      execute_plain_query(query_string::String,
                          query_args::Union{Vector,Missing},
                          dbconn::LibPQ.Connection)

Execute a query and with the given arguments returns a dataframe
"""
function execute_plain_query(query_string::String,
                             query_args::Union{Vector,Missing},
                             dbconn::LibPQ.Connection)
   Controller.execute_plain_query(query_string,
                                  query_args,
                                  dbconn)
end

"""
      execute_query_and_handle_result(query_string::String,
                                      data_type::DataType,
                                      query_args::Union{Vector,Missing},
                                      retrieve_complex_props::Bool,
                                      dbconn::LibPQ.Connection)

Execute a query and with the given arguments and convert the rows to the given
data_type in the same way that `retrieve_entity` would do it.
"""
function execute_query_and_handle_result(query_string::String,
                                         data_type::DataType,
                                         query_args::Union{Vector,Missing},
                                         retrieve_complex_props::Bool,
                                         dbconn::LibPQ.Connection)

    Controller.execute_query_and_handle_result(query_string,
                                               data_type,
                                               query_args,
                                               retrieve_complex_props,
                                               dbconn)
end
